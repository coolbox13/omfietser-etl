{
  "name": "AH Scraper",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4b19d3af-c8c4-4ba9-b398-293f9c4d18b6",
              "name": "scraper_api_url",
              "value": "http://ah-scraper-api:8000",
              "type": "string"
            },
            {
              "id": "6f6f8131-7431-4ab3-9744-0aa88b9474dd",
              "name": "max_products",
              "value": 50,
              "type": "number"
            },
            {
              "id": "e63f7c5c-892e-4bd6-bd6e-c5c1367aec1c",
              "name": "categories_limit",
              "value": null,
              "type": "string"
            },
            {
              "id": "cd3c904c-e963-41ff-966b-5cec7123265f",
              "name": "webhook_url",
              "value": "http://n8n:5678/webhook/scraper-complete",
              "type": "string"
            },
            {
              "id": "b2ff1ff3-db49-474a-bb8e-4202e320db88",
              "name": "priority",
              "value": "high",
              "type": "string"
            },
            {
              "id": "6422dc02-91b3-41d5-a19a-8da8b629fe68",
              "name": "notify_on_complete",
              "value": true,
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "id": "82cd4d15-b79d-4af7-86c4-96b0387bbcdc",
      "name": "Set AH Configuration (Fixed)",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -768,
        432
      ],
      "notes": "FIXED: Configure for LIMITED scraping - 100 products for testing"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Set AH Configuration (Fixed)').item.json.scraper_api_url }}/scrape",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "max_products",
              "value": "={{ $('Set AH Configuration (Fixed)').item.json.max_products }}"
            },
            {
              "name": "categories_limit",
              "value": "={{ $('Set AH Configuration (Fixed)').item.json.categories_limit }}"
            },
            {
              "name": "webhook_url",
              "value": "={{ $('Set AH Configuration (Fixed)').item.json.webhook_url }}"
            },
            {
              "name": "priority",
              "value": "={{ $('Set AH Configuration (Fixed)').item.json.priority }}"
            },
            {
              "name": "notify_on_complete",
              "value": "={{ $('Set AH Configuration (Fixed)').item.json.notify_on_complete }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "3018ee3e-7160-4578-81d6-af78abeec2c4",
      "name": "Start AH Scraper (Fixed)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -320,
        432
      ],
      "notes": "FIXED: Proper JSON body with correct parameter names and values"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cf66a8b-30bc-4912-bacc-69e732ccc2c5",
              "name": "job_id",
              "value": "={{ $json.job_id }}",
              "type": "string"
            },
            {
              "id": "ec83d9d3-5f66-4092-ace0-23132848383c",
              "name": "scraper_api_url",
              "value": "={{ $('Set AH Configuration (Fixed)').item.json.scraper_api_url }}",
              "type": "string"
            },
            {
              "id": "44317888-08a0-4b09-a40d-57edadda4e35",
              "name": "status",
              "value": "={{ $json.status }}",
              "type": "string"
            },
            {
              "id": "fa79a5b2-3459-4fd3-8b31-0a8f107c4180",
              "name": "message",
              "value": "={{ $json.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "4866542d-fa29-4252-8e5c-35610279bb10",
      "name": "Format Job Info",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -80,
        432
      ],
      "notes": "Format job information - uses corrected configuration"
    },
    {
      "parameters": {
        "amount": 3
      },
      "id": "6eb327f3-2379-4c3b-a4da-2f9cb1b4cf9c",
      "name": "Wait 3 seconds",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        144,
        432
      ],
      "webhookId": "73d5ae76-d40f-4eea-b43a-e85294cab986",
      "notes": "Short wait for fast jobs (completes in ~2 seconds)"
    },
    {
      "parameters": {
        "url": "={{ $('Format Job Info').item.json.scraper_api_url }}/progress",
        "options": {
          "timeout": 15000
        }
      },
      "id": "96566a14-5def-4c21-a743-8571ca620596",
      "name": "Check AH Progress",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        368,
        432
      ],
      "notes": "FIXED: Use clean /progress endpoint for monitoring"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "idle",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "07abd95c-af84-4355-b139-bd08dd994f76"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "completed"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "running",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "6a679da4-b6e3-4b99-aa34-b0dd49262b08"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "continue"
            }
          ]
        },
        "options": {}
      },
      "id": "5b4a3cdf-2100-4bff-a48a-eabbb91b92ab",
      "name": "Route Based on Completion",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        560,
        432
      ],
      "notes": "Route based on completion flag check (reliable for fast jobs)"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"progress_info\": \"AH scrape in progress: {{ $json.products_scraped || 0 }} products scraped ({{ $json.progress_percent || 0 }}%)\",\n  \"job_id\": \"{{ $('Format Job Info').first().json.job_id }}\",\n  \"current_task\": \"{{ $json.current_task || 'Processing...' }}\"\n}",
        "options": {}
      },
      "id": "6608bb9e-9e49-42d6-8b15-52a4c33a858e",
      "name": "Log Progress",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        816,
        448
      ],
      "notes": "Log scraping progress from /progress endpoint"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -976,
        256
      ],
      "id": "17171bf1-ba3d-4f01-92d3-068eba3d60fb",
      "name": "Manual Trigger",
      "notes": "Manual trigger for testing"
    },
    {
      "parameters": {
        "command": "rm -f /shared-data/results/ah_* /shared-data/jobs/ah_* /shared-data/logs/ah_* && echo \"Cleanup completed\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -560,
        432
      ],
      "id": "5490190f-e1ce-451c-8e06-598343232cee",
      "name": "Cleanup previous scraping"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                1
              ],
              "triggerAtHour": 4
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -976,
        432
      ],
      "id": "2b97095a-1326-4dc9-9e5f-a1ee8168ff19",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "start-ah-scraper",
        "options": {}
      },
      "id": "17131e3b-7c0b-4eab-a327-f7a3f8c5da0b",
      "name": "Webhook Start",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -976,
        640
      ],
      "webhookId": "cd1dddb6-c55d-4bfc-98a5-239f1352f1cc"
    },
    {
      "parameters": {
        "url": "http://ah-scraper-api:8000/jobs",
        "options": {}
      },
      "id": "56ab658d-aa30-4b17-8a49-f593ee9b39a8",
      "name": "Get Running Jobs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        144,
        992
      ]
    },
    {
      "parameters": {
        "jsCode": "const jobs = $json;\nlet runningJob = null;\n\nif (Array.isArray(jobs)) {\n  runningJob = jobs.find(job => job.status === 'running' || job.status === 'queued');\n}\n\nif (!runningJob) {\n  throw new Error('No running AH jobs to stop');\n}\n\nreturn [{ json: { job_id: runningJob.job_id, status: runningJob.status } }];"
      },
      "id": "4379c13e-43e8-40cd-84e9-77175568e06f",
      "name": "Find Running Job",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        992
      ]
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=http://ah-scraper-api:8000/jobs/{{$json.job_id}}",
        "options": {}
      },
      "id": "de0db2ae-edfa-41b1-875b-8d3d9804ab74",
      "name": "Cancel Job",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        544,
        992
      ]
    },
    {
      "parameters": {
        "url": "={{ $('Format Job Info').item.json.scraper_api_url }}/jobs/{{ $('Format Job Info').item.json.job_id }}/results",
        "options": {}
      },
      "id": "6b9d16c1-5782-40b4-93a9-580a71820ad9",
      "name": "Get Scraper Results",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        944,
        176
      ],
      "notes": "Fetch the JSON results from the AH scraper API"
    },
    {
      "parameters": {
        "jsCode": "// Split scraped products into individual rows for database insertion\nconst input = $input.all()[0].json;\n\n// Extract data from the AH scraper structure\nconst data = input.debug_data || input;\nconst job_id = data.job_id || input.job_id || 'unknown';\nconst products = data.products || [];\n\n// Create one record per product\nconst productRecords = products.map(product => ({\n  json: {\n    shop_type: 'ah',\n    job_id: job_id,\n    raw_data: product, // Store individual product JSON\n    scraped_at: new Date().toISOString()\n  }\n}));\n\nconsole.log(`Prepared ${productRecords.length} product records for job: ${job_id}`);\n\n// Return array of product records for bulk insertion\nreturn productRecords;;"
      },
      "id": "39e879a7-83c4-4ac3-88f7-8afb13c5eac7",
      "name": "Transform Products for DB",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1152,
        176
      ],
      "notes": "Transform AH product data for PostgreSQL insertion"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO raw.products (shop_type, job_id, raw_data, scraped_at)\n  VALUES\n  {{ $input.all().map(item => `('${item.json.shop_type}', '${item.json.job_id}',\n  '${JSON.stringify(item.json.raw_data).replace(/'/g, \"''\")}', '${item.json.scraped_at}')`).join(',\\n') }}\n  RETURNING id, shop_type, job_id, scraped_at;",
        "options": {}
      },
      "id": "8b25c7b3-cab4-44b9-9158-b70a5145ec18",
      "name": "Insert Products to PostgreSQL",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1360,
        176
      ],
      "credentials": {
        "postgres": {
          "id": "I5xV7W0GlvPVyl4f",
          "name": "Postgres account"
        }
      },
      "notes": "Insert/update products in PostgreSQL database"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "scraper-complete",
        "options": {}
      },
      "id": "4ac00674-421d-41c6-b7ce-317b3c8fb417",
      "name": "Webhook - Scraper",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        432,
        -32
      ],
      "webhookId": "scraper-complete-webhook"
    },
    {
      "parameters": {
        "fromEmail": "hello@omfietser.nl",
        "toEmail": "hello@coolbox.com",
        "subject": "={{ $json.subject }}",
        "html": "={{ $json.html }}",
        "options": {
          "appendAttribution": "={{ true }}"
        }
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        1136,
        -32
      ],
      "id": "0f4ff6bd-bbe4-4838-aafa-88378894a0be",
      "name": "Send email1",
      "webhookId": "0b289efb-0a6d-46d0-81c4-4937af2b753d",
      "credentials": {
        "smtp": {
          "id": "pEwphKw4tqqGXXjt",
          "name": "SMTP account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse webhook payload and prepare status-specific email content\nconst payload = $json;\n\n// Extract from nested body if it exists, otherwise use direct payload\nconst data = payload.body || payload;\n\n// Extract job information\nconst jobId = data.job_id || 'unknown';\nconst status = data.status || 'unknown';\nconst resultsCount = data.results_count || data.products_scraped || 0;\nconst errorMessage = data.error || data.error_message || '';\nconst executionTime = data.execution_time || data.duration_seconds || '';\nconst cancelReason = data.reason || data.cancel_reason || '';\n\n// Determine email subject and content based on status\nlet subject, htmlContent, statusIcon;\n\nswitch (status.toLowerCase()) {\n  case 'completed':\n  case 'success':\n    subject = `✅ AH Scrape completed successfully - ${resultsCount} products`;\n    statusIcon = '✅';\n    htmlContent = `\n      <h2>${statusIcon} AH Scraping Job Completed Successfully</h2>\n      <p><strong>Job ID:</strong> ${jobId}</p>\n      <p><strong>Products Scraped:</strong> ${resultsCount}</p>\n      ${executionTime ? `<p><strong>Execution Time:</strong> ${executionTime} seconds</p>` : ''}\n      <p><strong>Status:</strong> Completed successfully</p>\n      <hr>\n      <p>The Albert Heijn scraping job has finished successfully and all data has been collected.</p>\n    `;\n    break;\n    \n  case 'failed':\n  case 'error':\n    subject = `❌ AH Scrape failed - Error occurred`;\n    statusIcon = '❌';\n    htmlContent = `\n      <h2>${statusIcon} AH Scraping Job Failed</h2>\n      <p><strong>Job ID:</strong> ${jobId}</p>\n      <p><strong>Status:</strong> Failed</p>\n      <p><strong>Error:</strong> ${errorMessage}</p>\n      ${executionTime ? `<p><strong>Runtime before failure:</strong> ${executionTime} seconds</p>` : ''}\n      <hr>\n      <p style=\"color: red;\">The Albert Heijn scraping job encountered an error and could not complete. Please check the logs for more details.</p>\n    `;\n    break;\n    \n  case 'cancelled':\n  case 'canceled':\n    subject = `⚠️ AH Scrape cancelled by user`;\n    statusIcon = '⚠️';\n    htmlContent = `\n      <h2>${statusIcon} AH Scraping Job Cancelled</h2>\n      <p><strong>Job ID:</strong> ${jobId}</p>\n      <p><strong>Status:</strong> Cancelled</p>\n      <p><strong>Products Scraped:</strong> ${resultsCount} (before cancellation)</p>\n      ${cancelReason ? `<p><strong>Reason:</strong> ${cancelReason}</p>` : ''}\n      ${executionTime ? `<p><strong>Runtime:</strong> ${executionTime} seconds</p>` : ''}\n      <hr>\n      <p>The Albert Heijn scraping job was cancelled before completion.</p>\n    `;\n    break;\n    \n  default:\n    subject = `❓ AH Scrape status: ${status}`;\n    statusIcon = '❓';\n    htmlContent = `\n      <h2>${statusIcon} AH Scraping Job Status Update</h2>\n      <p><strong>Job ID:</strong> ${jobId}</p>\n      <p><strong>Status:</strong> ${status}</p>\n      <p><strong>Products Scraped:</strong> ${resultsCount}</p>\n      <hr>\n      <p>Received webhook notification with status: ${status}</p>\n      <p><strong>Webhook Data:</strong></p>\n      <pre style=\"background: #f5f5f5; padding: 10px; border-radius: 5px;\">${JSON.stringify(data, null, 2)}</pre>\n    `;\n}\n\n// Return formatted data for email\nreturn [{\n  json: {\n    subject: subject,\n    html: htmlContent,\n    status: status,\n    job_id: jobId,\n    results_count: resultsCount,\n    error_message: errorMessage,\n    raw_payload: payload\n  }\n}];"
      },
      "id": "7b78b947-7351-49be-acb8-8efc29d3d6ee",
      "name": "Analyze Job Status1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        944,
        -32
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Set AH Configuration (Fixed)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set AH Configuration (Fixed)": {
      "main": [
        [
          {
            "node": "Cleanup previous scraping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start AH Scraper (Fixed)": {
      "main": [
        [
          {
            "node": "Format Job Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check AH Progress": {
      "main": [
        [
          {
            "node": "Route Based on Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Based on Completion": {
      "main": [
        [
          {
            "node": "Analyze Job Status1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Scraper Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Progress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Progress": {
      "main": [
        [
          {
            "node": "Wait 3 seconds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cleanup previous scraping": {
      "main": [
        [
          {
            "node": "Start AH Scraper (Fixed)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Job Info": {
      "main": [
        [
          {
            "node": "Wait 3 seconds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 3 seconds": {
      "main": [
        [
          {
            "node": "Check AH Progress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Set AH Configuration (Fixed)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Start": {
      "main": [
        [
          {
            "node": "Set AH Configuration (Fixed)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Running Jobs": {
      "main": [
        [
          {
            "node": "Find Running Job",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Running Job": {
      "main": [
        [
          {
            "node": "Cancel Job",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Scraper Results": {
      "main": [
        [
          {
            "node": "Transform Products for DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Products for DB": {
      "main": [
        [
          {
            "node": "Insert Products to PostgreSQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook - Scraper": {
      "main": [
        []
      ]
    },
    "Analyze Job Status1": {
      "main": [
        [
          {
            "node": "Send email1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "0d000d93-832d-4d37-916b-752b2d9ffa2c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ff86f1271f3774b5ec7ae16a0c838a4eb5e655bdb89bad020914df6993bd2aac"
  },
  "id": "FNh0IMM2jC6cDm2e",
  "tags": []
}