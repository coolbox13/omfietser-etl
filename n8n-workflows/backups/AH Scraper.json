{
  "name": "AH Scraper Complete (Repaired)",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "scraper_url",
              "name": "scraper_api_url",
              "value": "http://ah-scraper:8000",
              "type": "string"
            },
            {
              "id": "max_prod",
              "name": "max_products",
              "value": 100,
              "type": "number"
            },
            {
              "id": "webhook_url",
              "name": "webhook_url",
              "value": "http://n8n:5678/webhook/scraper-complete",
              "type": "string"
            },
            {
              "id": "priority",
              "name": "priority",
              "value": "high",
              "type": "string"
            },
            {
              "id": "notify",
              "name": "notify_on_complete",
              "value": true,
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "id": "config-node",
      "name": "Set AH Configuration (Fixed)",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        512,
        304
      ],
      "notes": "FIXED: Updated to use ah-scraper:8000 service"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $node['Set AH Configuration (Fixed)'].json['scraper_api_url'] }}/scrape",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "max_products",
              "value": "={{ $node['Set AH Configuration (Fixed)'].json['max_products'] }}"
            },
            {
              "name": "webhook_url",
              "value": "={{ $node['Set AH Configuration (Fixed)'].json['webhook_url'] }}"
            },
            {
              "name": "priority",
              "value": "={{ $node['Set AH Configuration (Fixed)'].json['priority'] }}"
            },
            {
              "name": "notify_on_complete",
              "value": "={{ $node['Set AH Configuration (Fixed)'].json['notify_on_complete'] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "start-scraper",
      "name": "Start AH Scraper (Fixed)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        896,
        304
      ],
      "notes": "FIXED: Uses ah-scraper service"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "job_id",
              "name": "job_id",
              "value": "={{ $json.job_id }}",
              "type": "string"
            },
            {
              "id": "scraper_url_ref",
              "name": "scraper_api_url",
              "value": "={{ $node['Set AH Configuration (Fixed)'].json['scraper_api_url'] }}",
              "type": "string"
            },
            {
              "id": "job_status",
              "name": "status",
              "value": "={{ $json.status }}",
              "type": "string"
            },
            {
              "id": "job_message",
              "name": "message",
              "value": "={{ $json.message }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "format-job",
      "name": "Format Job Info",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1104,
        304
      ],
      "notes": "Format job information"
    },
    {
      "parameters": {},
      "id": "wait-init",
      "name": "Wait 5 seconds",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1312,
        304
      ],
      "webhookId": "9915aee1-317e-459a-bf5c-0820d8d926a5",
      "notes": "FIXED: Removed webhookId parameter"
    },
    {
      "parameters": {
        "url": "={{ $node['Format Job Info'].json['scraper_api_url'] }}/progress",
        "options": {
          "timeout": 15000
        }
      },
      "id": "check-progress",
      "name": "Check AH Progress",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1504,
        304
      ],
      "notes": "Progress monitoring"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "idle",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "idle-check"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "completed"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "running",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "running-check"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "continue"
            }
          ]
        },
        "options": {}
      },
      "id": "route-completion",
      "name": "Route Based on Completion",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        1712,
        304
      ],
      "notes": "FIXED: Route only to results on completion"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"progress_info\": \"AH scrape in progress: {{ $json.products_scraped || 0 }} products scraped ({{ $json.progress_percent || 0 }}%)\",\n  \"job_id\": \"{{ $node['Format Job Info'].json['job_id'] }}\",\n  \"current_task\": \"{{ $json.current_task || 'Processing...' }}\"\n}",
        "options": {}
      },
      "id": "log-progress",
      "name": "Log Progress",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1904,
        400
      ],
      "notes": "Log progress and loop back"
    },
    {
      "parameters": {
        "url": "={{ $node['Format Job Info'].json['scraper_api_url'] }}/jobs/{{ $node['Format Job Info'].json['job_id'] }}/results",
        "options": {}
      },
      "id": "get-results",
      "name": "Get Scraper Results",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1904,
        208
      ],
      "notes": "Fetch results when completed"
    },
    {
      "parameters": {
        "jsCode": "// Transform scraped products for database insertion\nconst input = $input.all()[0].json;\n\n// Extract data from AH scraper structure\nconst data = input.debug_data || input;\nconst job_id = data.job_id || input.job_id || 'unknown';\nconst products = data.products || [];\n\n// Create one record per product\nconst productRecords = products.map(product => ({\n  json: {\n    shop_type: 'ah',\n    job_id: job_id,\n    raw_data: product,\n    scraped_at: new Date().toISOString()\n  }\n}));\n\nconsole.log(`Prepared ${productRecords.length} product records for job: ${job_id}`);\n\nreturn productRecords;"
      },
      "id": "transform-products",
      "name": "Transform Products for DB",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2112,
        208
      ],
      "notes": "Transform for PostgreSQL"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Create schema and table if they don't exist\nCREATE SCHEMA IF NOT EXISTS raw;\nCREATE TABLE IF NOT EXISTS raw.products (\n    id SERIAL PRIMARY KEY,\n    shop_type VARCHAR(50) NOT NULL,\n    job_id VARCHAR(255) NOT NULL,\n    raw_data JSONB NOT NULL,\n    scraped_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Insert the products\nINSERT INTO raw.products (shop_type, job_id, raw_data, scraped_at)\nVALUES \n{{ $input.all().map(item => `('${item.json.shop_type}', '${item.json.job_id}', '${JSON.stringify(item.json.raw_data).replace(/'/g, \"''\")}', '${item.json.scraped_at}')`).join(',\\n') }}\nRETURNING id, shop_type, job_id, scraped_at;",
        "options": {}
      },
      "id": "insert-postgres",
      "name": "Insert Products to PostgreSQL",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        2304,
        208
      ],
      "credentials": {
        "postgres": {
          "id": "ngdS1yGW83ksMnqu",
          "name": "Postgres account"
        }
      },
      "notes": "Insert into postgres service"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "scraper-complete",
        "options": {}
      },
      "id": "webhook-complete",
      "name": "Webhook - Scraper Complete",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        512,
        112
      ],
      "webhookId": "scraper-complete-fixed",
      "notes": "FIXED: Dedicated webhook for completion notifications"
    },
    {
      "parameters": {
        "jsCode": "// Parse webhook payload from ah-scraper service\nconst payload = $json;\n\n// Extract from nested body if it exists\nconst data = payload.body || payload;\n\n// Extract job information\nconst jobId = data.job_id || 'unknown';\nconst status = data.status || 'unknown';\nconst resultsCount = data.results_count || data.products_scraped || 0;\nconst errorMessage = data.error || data.error_message || '';\nconst executionTime = data.execution_time || data.duration_seconds || '';\n\n// Determine email content\nlet subject, htmlContent, statusIcon;\n\nswitch (status.toLowerCase()) {\n  case 'completed':\n  case 'success':\n    subject = `✅ AH Scrape completed successfully - ${resultsCount} products`;\n    statusIcon = '✅';\n    htmlContent = `\n      <h2>${statusIcon} AH Scraping Job Completed Successfully</h2>\n      <p><strong>Job ID:</strong> ${jobId}</p>\n      <p><strong>Products Scraped:</strong> ${resultsCount}</p>\n      ${executionTime ? `<p><strong>Execution Time:</strong> ${executionTime} seconds</p>` : ''}\n      <p><strong>Service:</strong> ah-scraper:8000 (FIXED)</p>\n      <hr>\n      <p>The Albert Heijn scraping job has finished successfully.</p>\n    `;\n    break;\n    \n  case 'failed':\n  case 'error':\n    subject = `❌ AH Scrape failed - Error occurred`;\n    statusIcon = '❌';\n    htmlContent = `\n      <h2>${statusIcon} AH Scraping Job Failed</h2>\n      <p><strong>Job ID:</strong> ${jobId}</p>\n      <p><strong>Status:</strong> Failed</p>\n      <p><strong>Error:</strong> ${errorMessage}</p>\n      <p><strong>Service:</strong> ah-scraper:8000 (FIXED)</p>\n      <hr>\n      <p style=\"color: red;\">The job encountered an error. Check ah-scraper logs.</p>\n    `;\n    break;\n    \n  default:\n    subject = `❓ AH Scrape status: ${status}`;\n    statusIcon = '❓';\n    htmlContent = `\n      <h2>${statusIcon} AH Scraping Job Status Update</h2>\n      <p><strong>Job ID:</strong> ${jobId}</p>\n      <p><strong>Status:</strong> ${status}</p>\n      <p><strong>Products:</strong> ${resultsCount}</p>\n      <hr>\n      <p>Received webhook with status: ${status}</p>\n    `;\n}\n\nreturn [{\n  json: {\n    subject: subject,\n    html: htmlContent,\n    status: status,\n    job_id: jobId,\n    results_count: resultsCount\n  }\n}];"
      },
      "id": "analyze-status",
      "name": "Analyze Job Status",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        704,
        112
      ],
      "notes": "FIXED: Analyze webhook payload"
    },
    {
      "parameters": {
        "fromEmail": "hello@omfietser.nl",
        "toEmail": "hello@coolbox.com",
        "subject": "={{ $json.subject }}",
        "html": "={{ $json.html }}",
        "options": {
          "appendAttribution": "={{ true }}"
        }
      },
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [
        912,
        112
      ],
      "id": "send-email",
      "name": "Send Email Notification",
      "webhookId": "d84d5717-aac3-4313-8f69-1779dc74f7ab",
      "credentials": {
        "smtp": {
          "id": "wdEUrLjEOyg2qyAe",
          "name": "SMTP account"
        }
      },
      "notes": "FIXED: Send completion emails"
    },
    {
      "parameters": {
        "command": "echo \"Cleanup completed - current Docker setup\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        704,
        304
      ],
      "id": "cleanup",
      "name": "Cleanup Previous Scraping"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        240,
        96
      ],
      "id": "manual-trigger",
      "name": "Manual Trigger",
      "notes": "Manual trigger for testing"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                1
              ],
              "triggerAtHour": 6
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        240,
        512
      ],
      "id": "schedule-trigger",
      "name": "Schedule Trigger"
    }
  ],
  "pinData": {},
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Set AH Configuration (Fixed)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Set AH Configuration (Fixed)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set AH Configuration (Fixed)": {
      "main": [
        [
          {
            "node": "Cleanup Previous Scraping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cleanup Previous Scraping": {
      "main": [
        [
          {
            "node": "Start AH Scraper (Fixed)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start AH Scraper (Fixed)": {
      "main": [
        [
          {
            "node": "Format Job Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Job Info": {
      "main": [
        [
          {
            "node": "Wait 5 seconds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 5 seconds": {
      "main": [
        [
          {
            "node": "Check AH Progress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check AH Progress": {
      "main": [
        [
          {
            "node": "Route Based on Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Based on Completion": {
      "main": [
        [
          {
            "node": "Get Scraper Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Progress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Progress": {
      "main": [
        [
          {
            "node": "Wait 5 seconds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Scraper Results": {
      "main": [
        [
          {
            "node": "Transform Products for DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Products for DB": {
      "main": [
        [
          {
            "node": "Insert Products to PostgreSQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook - Scraper Complete": {
      "main": [
        [
          {
            "node": "Analyze Job Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Job Status": {
      "main": [
        [
          {
            "node": "Send Email Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "3533dd3b-3f4f-422b-b762-2c62e9a97887",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c7fbe92541273204d3c91939d7aa33b23929eaf7d8129c00c01ca52c93ae7f43"
  },
  "id": "pdL9Qf4JtlgOUIsD",
  "tags": []
}